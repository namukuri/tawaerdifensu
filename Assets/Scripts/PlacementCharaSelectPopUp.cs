using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using DG.Tweening;


public class PlacementCharaSelectPopUp : MonoBehaviour
{
    [SerializeField]
    private Button btnClosePopUp;

    [SerializeField]
    private Button btnChooseChara;

    [SerializeField]
    private CanvasGroup canvasGroup;

    private CharaGenerator charaGenerator;

    // TODO 制御を行いたい各コンポーネントの情報をアサインするための変数群を追加する

    // ポップアップの設定
    public void SetUpPlacementCharaSelectPopUp(CharaGenerator charaGenerator)
    {
        this.charaGenerator = charaGenerator;

        // TODO 他に設定項目があったら追加する

        // ポップアップを一度見えない状態にする
        canvasGroup.alpha = 0;

        // 各ボタンの操作を押せない状態にする
        SwithcActivateButtons(false);

        // TODO スクリプタブル・オブジェクトに登録されているキャラ分のボタンのゲームオブジェクトを生成

        // TODO 最初に生成したボタンの場合

        // TODO 選択しているキャラとして初期値に設定

        // 各ボタンにメソッドを登録
        btnChooseChara.onClick.AddListener(OnClickSubmitChooseChara);

        btnClosePopUp.onClick.AddListener(OnClickClosePopUp);

        // 各ボタンを押せる状態にする
        SwithcActivateButtons(true);

    }

    // 各ボタンのアクティブ状態の切り替え
    public void SwithcActivateButtons(bool isSwitch)
    {
        btnChooseChara.interactable = isSwitch;
        btnClosePopUp.interactable = isSwitch;

    }

    // ポップアップの表示
    public void ShowPopUp()
    {

        // TODO 各キャラのボタンの制御

        // ポップアップの表示
        canvasGroup.DOFade(1.0f, 0.5f);
    }

    // 選択しているキャラを配置するボタンを押した際の処理
    private void OnClickSubmitChooseChara()
    {
        // TODO コストの支払いが可能か最終確認

        // TODO 選択しているキャラの生成

        // ポップアップの非表示
        HidePopUp();
    }

    // 配置を止めるボタンを押した際の処理
    private void OnClickClosePopUp()
    {
        // ポップアップの非表示
        HidePopUp();
    }

    // ポップアップの非表示
    private void HidePopUp()
    {
        // TODO 各キャラのボタンの制御

        // ポップアップの非表示
        canvasGroup.DOFade(0, 0.5f).OnComplete(() => charaGenerator.InactivatePlacementCharaSelectPopUp()); // 次の手順でメソッドを追加するので、それまでコメントアウトしておいてください。
    }
   
}
